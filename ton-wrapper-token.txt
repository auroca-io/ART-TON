;; Multi-Asset Wrapper Token Contract with Enhanced Verification and Price Feeds

;; Additional Storage Keys
const int PRICE_ORACLE_KEY = 105;
const int VERIFICATION_TIMEOUT_KEY = 106;

;; Additional Error Codes
const int ERROR_DEPOSIT_TIMEOUT = 106;
const int ERROR_INVALID_ORACLE = 107;
const int ERROR_PRICE_STALE = 108;
const int ERROR_DEPOSIT_MISMATCH = 109;
const int ERROR_SLIPPAGE = 110;

;; Storage Variables with Oracle
(int, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(256),  ;; total_supply
        ds~load_ref(),      ;; owner_map
        ds~load_ref(),      ;; underlying_assets_map
        ds~load_ref()       ;; price_oracles_map
    );
}

;; Price Oracle Structure
struct OracleData {
    slice oracle_address;
    int last_update;
    int price;
    int decimals;
}

;; Enhanced deposit verification with multi-step process
() verify_asset_deposit(slice asset_addr, int expected_amount, int user_address) impure {
    ;; Step 1: Request balance check with callback
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(asset_addr)
        .store_coins(MIN_TON_FOR_STORAGE)  ;; Gas for callback
        .store_uint(1, 1)  ;; We want a response
        .store_ref(
            begin_cell()
                .store_uint(op::check_balance_with_callback(), 32)
                .store_uint(cur_lt(), 64)
                .store_slice(user_address)
                .store_uint(expected_amount, 128)
            .end_cell()
        );
    
    ;; Store verification request with timestamp
    var verification_data = begin_cell()
        .store_uint(now(), 32)  ;; Timestamp
        .store_slice(user_address)
        .store_uint(expected_amount, 128)
        .end_cell();
    
    save_verification_request(asset_addr, verification_data);
    
    ;; Send verification request
    send_raw_message(msg.end_cell(), 64);
}

;; Verify deposit callback handler
() handle_deposit_verification(slice asset_addr, int actual_amount, slice user_address) impure {
    ;; Load verification request
    var (request_time, expected_user, expected_amount) = load_verification_request(asset_addr);
    
    ;; Verify request hasn't expired
    throw_if(ERROR_DEPOSIT_TIMEOUT, now() - request_time > 300);  ;; 5 minute timeout
    
    ;; Verify user matches
    throw_unless(ERROR_UNAUTHORIZED, equal_slices(user_address, expected_user));
    
    ;; Verify amount matches with small tolerance for dust
    int difference = abs(actual_amount - expected_amount);
    throw_if(ERROR_DEPOSIT_MISMATCH, difference > 1000);  ;; Allow 0.001 token difference
    
    ;; Clear verification request
    clear_verification_request(asset_addr);
}

;; Price Oracle Integration
() configure_price_oracle(slice asset_addr, slice oracle_addr) impure {
    ;; Only owner can set oracle
    throw_unless(ERROR_UNAUTHORIZED, equal_slices(sender_address(), owner_address()));
    
    var (_, _, _, price_oracles) = load_data();
    
    ;; Store oracle address for asset
    price_oracles~udict_set(256, asset_addr, oracle_addr);
    
    save_data(price_oracles);
}

;; Get latest price from oracle
(int, int) get_asset_price(slice asset_addr) impure {
    var (_, _, _, price_oracles) = load_data();
    
    ;; Get oracle address for this asset
    var (oracle_addr, found?) = price_oracles.udict_get?(256, asset_addr);
    throw_unless(ERROR_INVALID_ORACLE, found?);
    
    ;; Request price from oracle
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(oracle_addr)
        .store_coins(MIN_TON_FOR_STORAGE)
        .store_uint(1, 1)  ;; We want a response
        .store_ref(
            begin_cell()
                .store_uint(op::get_price(), 32)
                .store_uint(cur_lt(), 64)
            .end_cell()
        );
    
    send_raw_message(msg.end_cell(), 64);
    
    ;; Oracle response will come in a separate message
    ;; For now, return cached price and timestamp
    return load_cached_price(asset_addr);
}

;; Handle oracle price update
() handle_price_update(slice asset_addr, int price, int timestamp) impure {
    ;; Verify oracle is authorized
    var (_, _, _, price_oracles) = load_data();
    var (oracle_addr, found?) = price_oracles.udict_get?(256, asset_addr);
    throw_unless(ERROR_UNAUTHORIZED, equal_slices(sender_address(), oracle_addr));
    
    ;; Update cached price
    save_cached_price(asset_addr, price, timestamp);
}

;; Enhanced mint with price validation
() mint(slice to, int amount) impure {
    throw_unless(ERROR_INVALID_AMOUNT, amount > 0);
    
    var (total_supply, owner_map, underlying_assets, price_oracles) = load_data();
    var distribution = load_distribution();
    
    ;; Calculate total value in reference currency
    int total_value = 0;
    
    var ds = distribution.begin_parse();
    int asset_count = ds~load_uint(8);
    
    repeat(asset_count) {
        slice asset_addr = ds~load_msg_addr();
        int percentage = ds~load_uint(16);
        
        ;; Get required amount of this asset
        int asset_amount = muldiv(amount, percentage, 10000);
        
        ;; Get current price
        var (price, timestamp) = get_asset_price(asset_addr);
        
        ;; Verify price is fresh (within last hour)
        throw_if(ERROR_PRICE_STALE, now() - timestamp > 3600);
        
        ;; Add to total value
        total_value += muldiv(asset_amount, price, DECIMAL_FACTOR);
        
        ;; Verify deposit
        verify_asset_deposit(asset_addr, asset_amount, sender_address());
    }
    
    ;; Verify total value matches expected
    throw_if(ERROR_SLIPPAGE, abs(total_value - amount) > amount / 100);  ;; Allow 1% slippage
    
    ;; Update balances
    owner_map~udict_set(256, to, amount);
    total_supply += amount;
    
    set_data(pack_token_data(total_supply, owner_map, underlying_assets, price_oracles));
}

;; Message Handlers (extended)
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    ;; Handle verification callbacks
    if (op == op::deposit_verification_callback()) {
        slice asset_addr = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        slice user_addr = in_msg_body~load_msg_addr();
        handle_deposit_verification(asset_addr, amount, user_addr);
        return ();
    }
    
    ;; Handle price updates
    if (op == op::price_update()) {
        slice asset_addr = in_msg_body~load_msg_addr();
        int price = in_msg_body~load_coins();
        int timestamp = in_msg_body~load_uint(32);
        handle_price_update(asset_addr, price, timestamp);
        return ();
    }
    
    ;; ... (rest of the message handlers remain the same)
}
